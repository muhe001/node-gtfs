{
  "name": "gtfs",
  "description": "Download GTFS transit data into mongodb and expose routes, stops, times and more",
  "version": "0.2.1",
  "author": {
    "name": "Brendan Nee",
    "email": "me@bn.ee"
  },
  "contributors": [
    {
      "name": "Alessio Bogon"
    },
    {
      "name": "Jacob Childress",
      "email": "jacobc@gmail.com"
    },
    {
      "name": "Robin Chou",
      "email": "hello@robinchou.com"
    },
    {
      "name": "cobralibre",
      "email": "jacobc@gmail.com"
    },
    {
      "name": "Matt Gruskin"
    },
    {
      "name": "Sam Hashemi",
      "email": "sam@samhashemi.com"
    },
    {
      "name": "Hafiz Ismail"
    },
    {
      "name": "Ethan Lo",
      "email": "ethan@ethanlo.com"
    },
    {
      "name": "Natalie Perna"
    },
    {
      "name": "Landon Reed"
    },
    {
      "name": "Jason Schapiro",
      "email": "yono38@gmail.com"
    },
    {
      "name": "Jean-Fran√ßois Vial",
      "email": "jeff@modulaweb.fr"
    },
    {
      "name": "wdalrymple"
    },
    {
      "name": "Ivan Yulaev"
    }
  ],
  "dependencies": {
    "async": "^1.4.2",
    "csv": "~0.4.5",
    "elasticsearch": "^8.2.0",
    "mongodb": "~2.0.34",
    "mongoosastic": "^3.3.2",
    "mongoose": "~4.1.9",
    "proj4": "~2.3.6",
    "request": "~2.64.0",
    "underscore": "~1.8.3",
    "unzip2": "~0.2.5"
  },
  "keywords": [
    "transit",
    "gtfs",
    "transportation"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/brendannee/node-gtfs.git"
  },
  "main": "index",
  "devDependencies": {
    "csv-parse": "~1.0.0",
    "should": "~7.1.0",
    "supertest": "~1.1.0",
    "timekeeper": "~0.0.5"
  },
  "scripts": {
    "download": "node scripts/download.js",
    "test": "NODE_ENV=test mocha ./test/mocha/**/*.js --reporter spec"
  },
  "license": "MIT",
  "readme": "# Node-GTFS\n\n[![NPM version](https://img.shields.io/npm/v/gtfs.svg?style=flat)](https://www.npmjs.com/package/gtfs)\n[![David](https://img.shields.io/david/brendannee/node-gtfs.svg)]()\n[![npm](https://img.shields.io/npm/dm/gtfs.svg?style=flat)]()\n\n`node-GTFS` loads transit data in [GTFS format](https://developers.google.com/transit/), unzips it and stores it to a MongoDB database. In addition, it provides some methods to query for agencies, routes, stops and times.  It also has spatial queries to find nearby stops, routes and agencies.\n\n## Example Application\n\nThe [GTFS-to-HTML](https://github.com/brendannee/gtfs-to-html) app uses node-gtfs for downloading and querying GTFS data. It provides a good example of how to use this library.\n\n## Setup\n\nYou can clone from github:\n\n    git clone git@github.com:brendannee/node-gtfs.git\n\n    cd node-gtfs\n\n    npm install\n\nor install directly from npm:\n\n    npm install gtfs\n\n    cd node_modules/gtfs\n\n## Configuration\n\nCopy `config-sample.js` to `config.js`.\n\n    cp config-sample.js config.js\n\nBefore you can use gtfs-to-html you must specify the transit agencies you'd like to use.\n\nYou can specify agencies using their [GTFS Data Exchange](http://www.gtfs-data-exchange.com/) `dataexchange_id`, a `url` to the GTFS file or a local `path`.\n\n* Put agency_key names from [gtfs-data-exchange.com](http://gtfs-data-exchange.com). See the [full list of agencies availale on GTFS data exchange](http://www.gtfs-data-exchange.com/api/agencies).:\n```\n    'bay-area-rapid-transit'\n```\n\n* Specify a download URL:\n```\n{\n    agency_key: 'caltrain',\n    url: 'http://www.gtfs-data-exchange.com/agency/caltrain/latest.zip'\n}\n```\n\n* Specify a path to a zipped GTFS file:\n```\n{\n    agency_key: 'localAgency',\n    path: '/path/to/the/gtfs.zip'\n}\n```\n* Specify a path to an unzipped GTFS file:\n```\n{\n    agency_key: 'localAgency',\n    path: '/path/to/the/unzipped/gtfs/'\n}\n```\n\nThe mongodb URI should also be configured in `config.js`. The default database URI is:\n`mongodb://localhost:27017/gtfs`\n\n## Loading Data\n\n### Make sure mongo is running\n\n    mongod\n\n### Run the download script\n\n    npm run download\n\nor\n\n    node ./scripts/download\n\n### Scheduling\n\nTo keep schedules up to date, you could schedule this to occur once per day.\n\n# Querying data\n\nYou can include this library in your project to expose some functions for querying GTFS data.\n\n## Including\n\nInclude this library.\n\n    var gtfs = require('gtfs');\n\n\n## Endpoints\n\n### Agencies\n\nReturns an array of all agencies\n\n    gtfs.agencies(function(err, agencies) {\n\n    });\n\n###Agencies near a point\n\nReturns an array of agencies within a `radius` of the `lat`, `lon` specified\n\n    gtfs.getAgenciesByDistance(lat, lon, radius, function(err, agencies) {\n\n    });\n\n### Get a specific agency\n\nReturns an agency\n\n    gtfs.getAgency(agency_key, function(err, agency) {\n\n    });\n\n### Routes for an agency\n\nReturns an array of routes for the `agency_key` specified\n\n    gtfs.getRoutesByAgency(agency_key, function(err, routes) {\n\n    });\n\n### Get a specific route\n\nReturns a route for the `route_id` specified\n\n    gtfs.getRoutesById(agency_key, route_id, function(err, routes) {\n\n    });\n\n### Routes near a point\n\nReturns an array of routes within a `radius` of the `lat`, `lon` specified\n\n    gtfs.getRoutesByDistance(lat, lon, radius, function(err, routes) {\n\n    });\n\n`radius` is optional and in miles.  Default: 1 mile\n\n### Routes that serve a specific stop\n\nReturns an array of routes serving the `agency_key` and `stop_id` specified\n\n    gtfs.getRoutesByStop(agency_key, stop_id, function(err, routes) {\n\n    });\n\n### Stops by id\n\nReturns an array of stops matching the `stop_ids` specified\n\n    gtfs.getStops(agency_key, stop_ids, function(err, stops) {\n\n    });\n\n`stop_ids` can be a single `stop_id` or an array of `stop_ids`.\n\n### Stops by route\n\nReturns an array of stops along the `route_id` for the `agency_key` and `direction_id` specified\n\n    gtfs.getStopsByRoute(agency_key, route_id, direction_id, function(err, stops) {\n\n    });\n\n### Stops near a point\n\nReturns an array of stops within a `radius` of the `lat`, `lon` specified\n\n    gtfs.getStopsByDistance(lat, lon, radius, function(err, stops) {\n\n    });\n\n`radius` is optional and in miles.  Default: 1 mile\n\n### Stop times for a trip\n\nReturns an array of stoptimes for the `trip_id` specified\n\n    gtfs.getStoptimesByTrip(agency_key, trip_id, function(err, stoptimes) {\n\n    });\n\n### Stop times by stop\n\nReturns an array of stoptimes for the `agency_key`, `route_id`, `stop_id` and `direction_id` specified\n\n    gtfs.getStoptimesByStop(gency_key, route_id, stop_id, direction_id, function(err, stoptimes) {\n\n    });\n\n### Trips by route and direction\n\nReturns an array of trips for the `agency_key`, `route_id` and `direction_id` specified\n\n    gtfs.getTripsByRouteAndDirection(gency_key, route_id, direction_id, service_ids, function(err, trips) {\n\n    });\n\n`service_ids` is optional\n\n### Direction name by route\n\nReturns an object of `{northData: \"Headsign north\", southData: \"Headsign south\"}` for the `agency_key` and `route_id` specified\n\n    gtfs.findBothDirectionNames(agency_key, route_id, function(err, directionNames) {\n\n    });\n\n### Shapes by route\n\nReturns an array of shapes for the `agency_key`, `route_id` and `direction_id` specified\n\n    gtfs.getShapesByRoute(agency_key, route_id, direction_id, function(err, shapes) {\n\n    });\n\n### Coordinates by route\n\nReturns an array of coordinates for the `agency_key`, and `route_id` specified\n\n    gtfs.getCoordinatesByRoute(agency_key, route_id, function(err, coordinates) {\n\n    });\n\n### Calendars\n\nReturns an array of calendars, optionally bounded by start_date and end_date\n\n    gtfs.getCalendars(agency_key, start_date, end_date, monday, tuesday, wednesday, thursday, friday, saturday, sunday, function(err, calendars) {\n\n    });\n\n### Calendars by serivce\n\nReturns an array of calendars for the `service_ids` specified\n\n    gtfs.getCalendarsByService(service_ids, function(err, calendars) {\n\n    });\n\n`service_ids` can be a single `service_id` or an array of `service_ids`.\n\n### Calendar Dates by service\n\nReturns an array of calendarDates for the `service_ids` specified\n\n    gtfs.getCalendarDatesByService(service_ids, function(err, calendars) {\n\n    });\n\n`service_ids` can be a single `service_id` or an array of `service_ids`.\n\n### Feed Info\n\nReturns feed_info for the agency_key specified\n\n    gtfs.getFeedInfo(agency_key, function(err, feedinfo) {\n\n    });\n\n### Timetables\n\nReturns an array of timetables for the `agency_key` specified\n\n    gtfs.getTimetablesByAgency(agency_key, function(err, timetables) {\n\n    });\n\n### Timetable by id\n\nReturns a timetable object matching the `timetable_id` specified\n\n    gtfs.getTimetable(agency_key, timetable_id, function(err, timetable) {\n\n    });\n\n### Route Directions by Route\n\nReturns a route directions object matching the `route_id` and `direction_id` specified\n\n    gtfs.getRouteDirection(agency_key, route_id, direction_id, function(err, routeDirection) {\n\n    });\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/brendannee/node-gtfs/issues"
  },
  "_id": "gtfs@0.2.1",
  "dist": {
    "shasum": "e5e51cd67a74cf4eb6cbc97651bf96cf1bcb0d0b"
  },
  "_resolved": "git+https://git@github.com/muhe001/node-gtfs#935f2f44b92c1da559f9d241524f50c5a21be547",
  "_from": "gtfs@git+https://git@github.com/muhe001/node-gtfs"
}
